#!/usr/bin/env node

const app = require('../app');
const http = require('http');
const common = require('../config');


let port = normalizePort(process.env.PORT || common.port);

app.set('port', port);

let server = http.createServer(app);
server.listen(port);
server.on('error', onError(port));
server.on('listening', onListening(server));

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
    let port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(port) {
	return (error) => { 
		if (error.syscall !== 'listen') {
			throw error;
		}

		let bind = typeof port === 'string'
			? 'Pipe ' + port
			: 'Port ' + port;

		// handle specific listen errors with friendly messages
		switch (error.code) {
			case 'EACCES':
				console.info(bind + ' requires elevated privileges');
				process.exit(1);
				break;
			case 'EADDRINUSE':
				console.info(bind + ' is already in use');
				process.exit(1);
				break;
			default:
				throw error;
		}
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening(server) {
	return () => {
		let addr = server.address();
		let bind = typeof addr === 'string'
			? 'pipe ' + addr
			: 'port ' + addr.port;
        console.info('Listening on ' + bind);
	}
}